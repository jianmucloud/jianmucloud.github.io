<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>概要设计-云边协同</title>
    <link href="/2022/12/24/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/"/>
    <url>/2022/12/24/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><blockquote><p>讲清楚为什么要做这个需求（不要写因为老师安排你做了这个需 求所以你做这个需求，⽽是结合你的调研情况，讲清楚<strong>在什么样的产业需求情况下</strong>，引发了⽼师安排你做或者你<strong>主动规划做这个需求</strong>） </p></blockquote><h2 id="传统服务发布、部署和管控问题"><a href="#传统服务发布、部署和管控问题" class="headerlink" title="传统服务发布、部署和管控问题"></a>传统服务发布、部署和管控问题</h2><ul><li><p>​    在传统服务网络场景下，服务提供商向外界提供服务需要保证如下工作：</p><ol><li>在本地搭建服务运行环境，并将服务部署到运行环境中，同时保持服务的无间断运行，从而保证服务使用者在任何时间都可以调用服务提供商已经发布的服务</li><li>向外界提供服务的期间，服务提供商需要管理服务运行依赖的基础设施，同时服务调用过程中产生的调度、监控运维问题也需服务提供商自行解决</li></ol></li><li><p>​      因此，服务提供商向外界提供服务的过程中需要完成大量冗余、不必要的工作，同时也占用了部分资源来维持服务的运行，这些问题打击了服务生态发展的积极性；更重要的是，服务网络也受到了许多影响：</p><ol><li>由于服务提供商提供的服务均被部署运行在自行搭建的运行环境，发布的服务只对外界提供web API，服务网络平台无法对全局服务进行统一的有效管理和监管。</li><li>服务网络平台无法对全局网络进行有效的调度，无法从根源上解决网络堵塞、负载过重的问题，整体网络不能达到一个良好的负载均衡、资源使用合理的状态。</li></ol></li></ul><h2 id="故障情况下服务质量的问题（涉及到服务托管、边缘自治）"><a href="#故障情况下服务质量的问题（涉及到服务托管、边缘自治）" class="headerlink" title="故障情况下服务质量的问题（涉及到服务托管、边缘自治）"></a>故障情况下服务质量的问题（涉及到服务托管、边缘自治）</h2><p>​        在传统的服务网络场景下，客户和服务注册中心无可避免会遇到一些故障问题，如网络波动和断开、硬件设施损坏、断电等等，这些问题都将会影响服务提供和使用的流程。例如，当服务提供方与外部或注册中心断开，其发布的服务将无法继续为其订阅者提供正常的调用；当服务消费方与外部或注册中心断开，其订阅的服务将无法进行访问，从而影响服务的继续使用。因此，如何在一些故障情况下，为客户提供更加良好的服务体验，保障服务质量，是我们需要思考和解决的课题。</p><h2 id="边缘低时延场景问题"><a href="#边缘低时延场景问题" class="headerlink" title="边缘低时延场景问题"></a>边缘低时延场景问题</h2><p>​        在传统的服务网络中，服务提供者基本是将服务应用部署在自己内部，服务使用者如果需要使用服务，必须跨越公网访问服务和传输数据，一般无法满足对时延要求极高的边缘场景需求。少部分考虑到边缘需求的服务提供者，会试图将服务应用部署在服务使用方以解决低时延需求，但过程的实现均需要服务发布商和服务使用方提供相关的技术人员来部署服务及后续运维，对双方都是极其麻烦而耗时耗力的事情。</p><h1 id="需求价值"><a href="#需求价值" class="headerlink" title="需求价值"></a>需求价值</h1><blockquote><p>讲清楚这个需求做了之后，前⾯的需求背景中提到的当前业界⾯临的哪些痛点问题就可以解决掉了。</p></blockquote><p>客户：服务发布者（提供者）、服务消费者（使用者）</p><p>云端：服务网络</p><p>边缘：客户方</p><h2 id="健康服务生态：客户资源与服务托管，规范服务全生命周期，打造可持续服务环境，网络驱动服务生态发展"><a href="#健康服务生态：客户资源与服务托管，规范服务全生命周期，打造可持续服务环境，网络驱动服务生态发展" class="headerlink" title="健康服务生态：客户资源与服务托管，规范服务全生命周期，打造可持续服务环境，网络驱动服务生态发展"></a>健康服务生态：客户资源与服务托管，规范服务全生命周期，打造可持续服务环境，网络驱动服务生态发展</h2><p>​        客户边缘资源的接入及服务的统一管理不仅给服务网络带来更多高效能力实现的可能性，让客户能够享受到更贴心的功能，使得使用产品的过程变得更加美好，更重要的是能够规范服务、管理服务的整个生命周期，并激励服务生态的健康可持续发展。</p><p>​        简单来说，服务网络将服务的整个生命周期都进行了规范和统一管理。服务按照标准进行发布，其服务应用交由服务网络来统一进行部署、运行、监控、调度。如此一来，一是极为有效地提高了服务网络对于服务的全局监控、监管能力；二是服务部署将不再局限于服务提供者内部，基于云边协同的服务智能部署、调度为实现服务的持续可靠、边缘低时延需求的满足带来了极大可能性。</p><h2 id="Serverless边缘：无需关注基础设施，让客户专注于服务本身"><a href="#Serverless边缘：无需关注基础设施，让客户专注于服务本身" class="headerlink" title="Serverless边缘：无需关注基础设施，让客户专注于服务本身"></a>Serverless边缘：无需关注基础设施，让客户专注于服务本身</h2><p>客户的边缘资源接入到服务网络后，会由服务网络进行统一管理，对于客户来说：</p><ul><li>对服务相关的所有操作，包括注册、发布、管理、订阅、部署、监控、计费等，都可在提供的服务可视化平台上进行，实现平台统一管理。</li><li>服务提供者层面：将服务注册至服务网络平台上后，便不再需要将注意力分散在上述的传统服务发布流程上，使双手从环境搭建、服务部署、运维管理等繁琐的操作中解放，让服务提供者无需关心基础设施而是更加专注于服务本身，可以为服务提供者降低开发成本、提高生产效率，优化服务质量。</li><li>服务使用者层面：服务应用的统一管理，使得服务使用的可靠性、持续性、无感性都能得到较好的保障，最终提高服务使用者的满意度。另外，消费者针对服务的一些特殊需求，例如对于某些服务的QoS需求，服务网络平台也将有可能满足。</li></ul><h2 id="服务智能：基于云边协同的服务智能部署、监控与调度满足客户各种需求"><a href="#服务智能：基于云边协同的服务智能部署、监控与调度满足客户各种需求" class="headerlink" title="服务智能：基于云边协同的服务智能部署、监控与调度满足客户各种需求"></a>服务智能：基于云边协同的服务智能部署、监控与调度满足客户各种需求</h2><p>​        客户的边缘资源接入到服务网络后，将会由服务网络进行统一管理，并提供服务可视化平台，服务客户可以在平台上完成对服务的注册、发布、管理、订阅等操作；服务被发布或订阅后，将会由服务网络进行统一、智能地部署、监控、调度，以满足客户各种需求，具体来说：</p><ul><li>实现服务统一管理、全局流量监控：（服务管理、服务可信、流量计费、服务调用链）<ul><li>通过实时监测统一管理的服务和客户端边缘节点的状态，可以做到在发生故障后向客户发出预警，采取相应措施维护服务稳定和质量。</li><li>可以通过区块链技术实现服务可信化，保证服务的可靠性和不可篡改性。同时根据服务调用链对服务进行智能计费，确保每一位客户的收支无误。</li><li>通过对全局流量进行监控，对服务部署位置及调用路径进行智能决策，保证服务网络负载均衡的良好状态。</li></ul></li><li>实现服务的持续可靠：（服务智能调度、云边迁移、边缘自治）服务应用运行的过程中，总会遇到一些无可避免的网络或硬件故障问题，从而影响到服务的持续可靠，得益于服务网络对客户资源与服务的统一管理，其拥有了基于云边协同的服务智能部署、监控与调度等能力，详细来说：<ul><li>对于客户双边：服务网络会实时监测客户边缘硬件资源以及服务应用的状态，若出现问题，则可以在服务可视化平台上及时进行通知，达到最小化损失。</li><li>对于服务发布者层面：（云边迁移，实现服务持续提供）当边缘资源与服务网络或外部网络断开时，部署、运行在自身内部的服务就不能继续对外提供访问。服务网络及时发现后，对于客户原本的一些无依赖型服务应用可以提供云边迁移功能，即将服务应用迁移至服务网络的一些计算资源上运行，实现服务提供的持续可靠。</li><li>对于服务消费者层面：（边缘自治，实现服务离线运行）当边缘资源与服务网络或外部网络断开时，客户就无法继续访问部署、运行在外部的服务，但对于原本部署、运行在客户边缘的服务应用则可以执行合适的离线策略，继续为客户提供服务；对于某些部署、运行在外部的无依赖服务应用，边缘若拥有其服务应用镜像并且其服务支持，则也可以临时在边缘部署、运行。</li></ul></li><li>满足边缘低时延场景需求：服务使用者边缘资源接入到服务网络中后，服务网络就可以在服务使用者边缘完成部分服务的部署和调度，以达到服务API的低时延调用，满足一些边缘低时延场景需求。该场景需求本质上需要服务提供者进行应用的支持，而服务网络平台就可以提供这样一种服务的模板和规范，做到服务发布者和消费者的双边解耦，无需关注复杂的流程而只需关注服务本身即可，这对于客户来说是十分便捷的。</li></ul><h1 id="服务网络架构设想"><a href="#服务网络架构设想" class="headerlink" title="服务网络架构设想"></a>服务网络架构设想</h1><h2 id="1-边缘层级划分"><a href="#1-边缘层级划分" class="headerlink" title="1 边缘层级划分"></a>1 边缘层级划分</h2><ul><li>边缘集群模式。服务网络在客户边缘集群上部署一套K8s（或者轻量级的K3s），在节点注册接入后进行自动选举Master。</li></ul><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/edge-cluster-mode.jpg" alt="边缘集群模式"></p><p>边缘集群模式的边缘依然需要运维，因此不太适合。</p><ul><li>统一接入模式。接入到云端K8s-Master进行统一节点管理。这种模式类似于KubeEdge模式</li></ul><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/unified-access-mode.jpg" alt="统一接入模式"></p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/edge-architecture-envision.jpg" alt="项目中边缘架构设想"></p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/dependent-service-app.jpg" alt="依赖型服务应用"></p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/dependent-service-application-and-client-service-application.jpg" alt="依赖型服务应用+客户端服务应用"></p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/independent-service-app.jpg" alt="无依赖型服务应用"></p><h2 id="2-服务定义与分类"><a href="#2-服务定义与分类" class="headerlink" title="2 服务定义与分类"></a>2 服务定义与分类</h2><p>服务=服务的描述+一个或多个的服务应用（服务应用提供一组API）</p><p>服务应用需要进行部署、运行后提供API </p><p>服务提供商提供服务的相关文件至服务注册中心，服务应用可被分为三种类型：</p><ol><li><strong>依赖型服务应用</strong></li><li><strong>无依赖型服务应用</strong></li><li><strong>客户端服务应用</strong></li></ol><p>根据场景分类，服务可分为三种模式：</p><ol><li><strong>依赖型服务应用</strong>。最常见的一种API式服务模式。</li><li><strong>无依赖型服务应用</strong>。可部署在服务网络上、使用者边缘（满足低时延）等等，可自由按需使用。</li><li><strong>依赖型服务应用</strong> + <strong>客户端服务应用</strong>。常见于低时延场景、云边协同场景，如工业边缘AI服务等。</li></ol><h2 id="3-服务部署"><a href="#3-服务部署" class="headerlink" title="3 服务部署"></a>3 服务部署</h2><p>服务网络根据服务类型及应用场景进行智能部署。</p><ol><li><strong>依赖型服务应用</strong>依赖服务提供者自身内部资源的应用，因此<strong>必须部署于发布者边缘或交换机</strong>上。</li><li><strong>无依赖型服务应用可部署于任何地方</strong>。</li><li><strong>客户端服务应用</strong>是依赖型服务应用的客户端，<strong>主要用于边缘场景</strong>，如边缘AI任务中的边缘推理，<strong>一般部署在使用者边缘或交换机上</strong>。当其使用其服务的某些功能需要与依赖型服务应用进行数据通信完成。</li></ol><h1 id="需求功能描述"><a href="#需求功能描述" class="headerlink" title="需求功能描述"></a>需求功能描述</h1><blockquote><p>讲清楚你的这个需求，做完之后，具体实现了那⼏条功能，注意这个和第⼆点需求价值的区别，需求价值是讲你通过这个需求实现，解决了哪些痛点问题，⽽需求功能描述是指具体到软件⼯程语⾔的，你所实现的基本功能条⽬，⾔简意赅、精准描述。 </p></blockquote><h2 id="1-云边协同"><a href="#1-云边协同" class="headerlink" title="1 云边协同"></a>1 云边协同</h2><p>服务网络云边协同具体含义为客户边缘端与服务网络端间的数据交互协同，具体又分为：</p><ul><li>服务发布者边缘端和服务网络云边协同</li><li>服务消费者边缘端和服务网络云边协同</li></ul><h3 id="1-1-边端资源接入"><a href="#1-1-边端资源接入" class="headerlink" title="1.1 边端资源接入"></a>1.1 边端资源接入</h3><ol><li>边缘资源注册：通过在服务可视化平台上申请边缘资源的加入，提供一定信息后，创建边缘资源抽象。</li><li>边缘资源接入程序安装：平台提供接入程序和指导，按照提供的指导步骤完成接入程序安装。</li><li>运行接入程序，进行自动配置与接入。</li><li>接入成功后，服务可视化平台即提示接入成功并展示相应的资源抽象界面。</li></ol><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/edge-resource-accessing-flow-chart.jpg" alt="边缘资源接入流程图"></p><h3 id="1-2-边缘资源孪生"><a href="#1-2-边缘资源孪生" class="headerlink" title="1.2 边缘资源孪生"></a>1.2 边缘资源孪生</h3><p>​      监控边缘资源的硬件状态，包括CPU、内存、磁盘等状态，以及服务资源、应用资源等状态，并上传至云端服务网络，与客户边缘资源抽象进行同步。</p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/edge-resource-twin-capabilities.jpg" alt="边缘资源孪生功能"></p><h3 id="1-3-服务智能部署"><a href="#1-3-服务智能部署" class="headerlink" title="1.3 服务智能部署"></a>1.3 服务智能部署</h3><p>服务网络根据服务类型、应用场景以及网络和资源状况对服务进行智能部署。</p><ol><li>依赖型服务应用依赖服务提供者自身内部资源，因此服务网络会将其部署于<strong>发布者边缘</strong>上。</li><li>无依赖型服务应用可部署于任何地方，具体部署位置由当前网络和资源状况、客户需求来决定。<ol><li>当客户对服务部署有特定需求时，如低时延，服务网络会将客户需求放至第一顺位，配合当前网络和资源状况对全局进行搜索筛选匹配，选择最优服务部署位置。</li><li>若客户对服务部署没有特定要求，服务网络在选择服务部署位置时，会将网络和资源状况作为最主要决策因素，通过智能部署算法来决定最终部署位置。</li></ol></li><li>客户端服务应用是依赖型服务应用的客户端，主要用于边缘场景，如边缘AI任务中的边缘推理，一般被部署在<strong>使用者边缘</strong>上。</li></ol><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/service-intelligent-deployment-capabilities.jpg" alt="服务智能部署功能"></p><h3 id="1-4-服务智能调度（应用云边迁移）"><a href="#1-4-服务智能调度（应用云边迁移）" class="headerlink" title="1.4 服务智能调度（应用云边迁移）"></a>1.4 服务智能调度（应用云边迁移）</h3><ol><li>当监测到某个服务应用出现连接不稳定等网络状况或者故障时，服务网络会及时采取相应措施，做到客户视角的可靠、稳定、无感的服务使用体验。<ol><li>连接客户与服务应用之间的路径负载失衡：对二者间的路由进行重新计算，在下一次调用时根据新路由进行转发调用。</li><li>服务出现故障：停止出现故障的服务应用，全局搜索服务网络中满足客户需求的最优服务应用副本，若不存在满足条件的服务应用副本，服务网络可以自动智能部署新的服务应用副本来满足客户需求。</li></ol></li><li>当边缘资源与服务网络或外部网络断开时，服务网络会在第一时间向客户告警，做到将损失最小化。对于部署在该边缘端的一些无依赖型服务应用可以提供云边迁移功能，即将与服务网络断联的服务应用进行再生副本，并将再生副本迁移至服务网络中的一些计算资源上运行，做到逻辑上的云边迁移，实现服务提供的持续可靠及用户角度的无感替换。</li></ol><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/cloud-edge-migration-capabilities.jpg" alt="云边迁移功能"></p><h2 id="2-边边协同"><a href="#2-边边协同" class="headerlink" title="2 边边协同"></a>2 边边协同</h2><ol><li>针对客户边缘内部设备节点资源的协同，为设备资源间创建快速通道，实现边缘内部节点的互相感知和数据传输。（类似于KubeEdge中的EdgeMesh）</li><li>针对服务应用间的协同，为服务应用间创建快速通道。</li></ol><blockquote><p>例如【<strong>依赖型服务应用</strong> + <strong>客户端服务应用】</strong>这种应用模式，我们可以为这两个服务应用提供的快速数据传输的通道，屏蔽一些复杂的远程数据操作，以便于服务发布者对该类应用模式的开发。</p></blockquote><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/edge-collaboration-function.jpg" alt="边边协同功能"></p><h2 id="3-边缘自治"><a href="#3-边缘自治" class="headerlink" title="3 边缘自治"></a>3 边缘自治</h2><p>边缘自治主要针对服务消费者端，目的是为了在边缘故障情况下，实现服务的持续可靠。</p><ul><li>针对消费者边缘与服务网络断开的情况，对于原本部署、运行在客户边缘的服务应用则执行针对改客户的<strong>离线策略</strong>，继续运行并为客户提供服务；对于某些原本部署、运行在外部的无依赖服务应用，若该服务支持<strong>离线策略</strong>，则临时部署在边缘并运行（这需要在边缘存储该类型服务应用的镜像），继续提供服务。</li><li>针对在上述状况的基础上，资源故障或重启的情况，考虑边缘多设备，若原本运行的服务应用受到影响，则进行边缘水平迁移，将服务应用重新部署、运行在其他正常的节点上。</li></ul><p><strong>离线策略</strong>：消费者边缘故障后，限定一段时间内继续使用服务，超过限定时间后不再提供服务。这一段时间可以根据企业的信用来设置，比如大企业设置一周，小企业一天。</p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/edge-autonomy-capabilities.jpg" alt="边缘自治功能"></p><h1 id="需求在整体系统功能图中所处的位置"><a href="#需求在整体系统功能图中所处的位置" class="headerlink" title="需求在整体系统功能图中所处的位置"></a>需求在整体系统功能图中所处的位置</h1><blockquote><p>基于功能图的⽰意图，细化到模块粒度</p></blockquote><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/image1.png" alt="云边协同在整体系统功能图中所处的位置 "></p><h1 id="需求在整体系统架构图中所处的位置"><a href="#需求在整体系统架构图中所处的位置" class="headerlink" title="需求在整体系统架构图中所处的位置"></a>需求在整体系统架构图中所处的位置</h1><blockquote><p>基于架构图的⽰意图，细化到模块粒度 </p></blockquote><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/image2.png" alt="云边协同在整体系统架构图中所处的位置 "></p><h1 id="需求在整体业务流程中所承载的流程"><a href="#需求在整体业务流程中所承载的流程" class="headerlink" title="需求在整体业务流程中所承载的流程"></a>需求在整体业务流程中所承载的流程</h1><blockquote><p>基于流程图的⽰意图，细化到模块粒度 </p></blockquote><p>服务发布、部署、使用流程图</p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E4%BA%91%E8%BE%B9%E5%8D%8F%E5%90%8C/image3.jpg" alt="流程图"></p><h1 id="需求对外部暴露的接口能力描述"><a href="#需求对外部暴露的接口能力描述" class="headerlink" title="需求对外部暴露的接口能力描述"></a>需求对外部暴露的接口能力描述</h1><blockquote><p>不是直接把API写出来，⽽是写你这个API要实现的功能是哪些， ⾔简意赅 </p></blockquote><p>…</p><h1 id="需求的模块组成及介绍"><a href="#需求的模块组成及介绍" class="headerlink" title="需求的模块组成及介绍*"></a>需求的模块组成及介绍*</h1><blockquote><p>模块1的功能描述，输⼊、输出、处理逻辑、与其他模块的交互逻 辑、处于系统中的逻辑位置、处于部署系统中的物理位置</p></blockquote><ul><li><strong>功能描述</strong></li><li><strong>输入</strong></li><li><strong>输出</strong></li><li><strong>处理逻辑</strong></li><li><strong>交互逻辑</strong></li><li><strong>系统中的逻辑位置</strong></li></ul><h2 id="服务网络云边协同模块：（完成服务网络系统和边缘资源间的数据协同）"><a href="#服务网络云边协同模块：（完成服务网络系统和边缘资源间的数据协同）" class="headerlink" title="服务网络云边协同模块：（完成服务网络系统和边缘资源间的数据协同）"></a>服务网络云边协同模块：（完成服务网络系统和边缘资源间的数据协同）</h2><h3 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h3><ol><li><h4 id="云边协同数据通道"><a href="#云边协同数据通道" class="headerlink" title="云边协同数据通道"></a>云边协同数据通道</h4><ul><li><strong>功能描述：</strong>负责云上控制面组件与边端节点之间跨越公网的数据可靠传输</li><li><strong>输入：</strong>服务网络的标准数据交换模型（包括协议、路由、服务资源等）</li><li><strong>输出：</strong>-</li><li><strong>处理逻辑：</strong>通过云边两端点建立TCP连接进行可靠传输</li><li><strong>交互逻辑：</strong>边端程序和云端程序、控制面组件之间进行交互必须调用该通道模块</li><li><strong>系统中的逻辑位置：</strong>连接云边两端的数据通道，一端在云，一端在边，跨越公网</li></ul></li><li><h4 id="边缘控制模块（API-Server-Lite）"><a href="#边缘控制模块（API-Server-Lite）" class="headerlink" title="边缘控制模块（API-Server Lite）"></a>边缘控制模块（API-Server Lite）</h4><ul><li><strong>功能描述：</strong>负责数据汇聚与分发、数据存取控制、边缘模块间协同、自治情况下的边缘节点间协同</li><li><strong>输入：</strong>服务网络的标准数据交换模型</li><li><strong>输出：</strong>-</li><li><strong>处理逻辑：</strong>通过解析命令信息，进行数据存存取和转发</li><li><strong>交互逻辑：</strong>云边协同数据通道、边缘数据持久、边缘数据管理、边缘数据孪生、边缘网络代理</li><li><strong>系统中的逻辑位置：</strong>处于边缘端程序</li></ul></li><li><h4 id="边缘数据持久（ETCD）"><a href="#边缘数据持久（ETCD）" class="headerlink" title="边缘数据持久（ETCD）"></a>边缘数据持久（ETCD）</h4><ul><li><strong>功能描述：</strong>负责将服务和应用的相关数据进行持久化、边缘日志，以支持边缘的自治能力的实现</li><li><strong>输入：</strong>服务数据、应用元数据、边缘资源数据、执行数据等</li><li><strong>输出：</strong>-  </li><li><strong>处理逻辑：</strong>通过类SQL语句进行数据持久化、记录模块执行日志数据</li><li><strong>交互逻辑：</strong>所有相关数据流动之前，必须经过该数据持久模块</li><li><strong>系统中的逻辑位置：</strong>处于边缘端程序</li></ul></li><li><h4 id="边缘应用管理（Kubelet-Lite）"><a href="#边缘应用管理（Kubelet-Lite）" class="headerlink" title="边缘应用管理（Kubelet Lite）"></a>边缘应用管理（Kubelet Lite）</h4><ul><li><strong>功能描述：</strong>通过解析应用元数据对服务应用进行管理（应用的拉取、创建、删除、监控等）</li><li><strong>输入：</strong>应用元数据</li><li><strong>输出：</strong>- </li><li><strong>处理逻辑：</strong>监控当前应用运行状态，比较应用元数据变化信息，通过操作当前边缘节点的资源，进行应用生命周期管理；监控应用状态，上报至边缘数据持久模块和云端</li><li><strong>交互逻辑：</strong>接收云端下发的或数据持久模块的应用元数据，解析应用变更信息，进行应用管理</li><li><strong>系统中的逻辑位置：</strong>处于边缘端程序</li></ul></li><li><h4 id="边缘资源孪生"><a href="#边缘资源孪生" class="headerlink" title="边缘资源孪生"></a>边缘资源孪生</h4><ul><li><strong>功能描述：</strong>监控并收集边缘节点硬件资源、服务资源、应用资源等信息，反馈至服务网络云端</li><li><strong>输入：</strong>边缘数据持久模块</li><li><strong>输出：</strong>硬件资源、服务资源、应用资源等状态信息</li><li><strong>处理逻辑：</strong>监控收集当前边缘节点资源信息、通过边缘数据持久模块获取服务和应用相关状态信息，进行打包上报</li><li><strong>交互逻辑：</strong>与边缘数据持久模块进行交互，收集相关必要信息</li><li><strong>系统中的逻辑位置：</strong>处于边缘端程序</li></ul></li><li><h4 id="边缘网络代理"><a href="#边缘网络代理" class="headerlink" title="边缘网络代理"></a>边缘网络代理</h4><ul><li><strong>功能描述：</strong>边缘用户数据面的通讯组件，维护节点上的网络规则，节点之间建立通道</li><li><strong>输入：</strong>数据交换的用户信息、边缘节点信息等</li><li><strong>输出：</strong>路由信息</li><li><strong>处理逻辑：</strong>通过云端网络组件的协同，帮助用户边缘节点间建立数据通道</li><li><strong>交互逻辑：</strong>边缘数据传输时可以用到此模块</li><li><strong>系统中的逻辑位置：</strong>处于边缘端程序</li></ul></li></ol><h3 id="增强模块"><a href="#增强模块" class="headerlink" title="增强模块"></a>增强模块</h3><ol><li><h3 id="智能部署"><a href="#智能部署" class="headerlink" title="智能部署"></a><strong>智能部署</strong></h3><ol><li><strong>功能描述</strong><ol><li>服务网络根据服务类型、应用场景以及网络和资源状况对服务进行智能部署。</li></ol></li><li><strong>输入：</strong><ol><li>服务ID：ServiceID</li><li>服务使用者ID：ServiceUserID</li><li>服务使用者需求：</li><li>服务网络资源和网络状况</li></ol></li><li><strong>输出</strong><ol><li>服务部署结果</li></ol></li><li><strong>处理逻辑</strong><ol><li>通过服务ID得到服务相关信息及文件</li><li>查看服务使用者的需求，若不为空的话，通过服务信息结合服务使用者需求（低时延、边缘部署等）、服务网络当前资源和网络状况以及服务使用者的物理位置为服务找到合适的部署位置；若为空的话，可以只由服务网络当前资源和网络状况及服务信息来决定部署的位置</li></ol></li><li><strong>交互逻辑</strong><ol><li>与服务注册中心进行交互，得到服务相关信息</li><li>与可观测模块进行交互，通过可观测模块中观测到的网络状况进行服务部署位置的选择</li></ol></li><li><strong>系统中的逻辑位置</strong></li></ol></li><li><h3 id="服务智能调度"><a href="#服务智能调度" class="headerlink" title="服务智能调度"></a>服务智能调度</h3><ol><li><strong>功能描述：</strong><ol><li>当出现网络状况或某些故障时，服务网络会及时采取相应措施对服务进行智能调度，保证服务的可靠、稳定及用户视角的无感</li><li>无依赖性服务：服务使用者对服务进行调用，因为服务一般有多个副本及多地部署，如果之前使用的服务副本1不满足当前场景的使用需求（因为时延或网络资源和负载均衡问题），则智能选择其他可以满足当前场景使用需求的副本进行替换，或者进行新副本的创建</li></ol></li><li><strong>输入：</strong><ol><li>服务ID</li><li>服务使用者ID及其物理位置</li><li>服务使用者需求</li><li>服务网络资源和网络状况</li><li>warning类型</li></ol></li><li><strong>输出</strong><ol><li>路由</li><li>服务API</li></ol></li><li><strong>处理逻辑</strong><ol><li>判断warning类型，是路由负载失衡、服务出现故障还是边缘资源与服务网络断开</li><li>如果是路由负载失衡，对二者间的路由进行重新计算，返回新计算出的路由</li><li>如果是服务出现故障，服务注册中心对应服务ID检查它所有的副本，结合可观测模块进行评估，选择满足服务使用者需求的最优的副本的API返回给服务使用者。如果服务注册中心没有满足需求的副本，则创建服务新副本，通过可观测模块进行新的部署来满足服务使用者的需求，在最后返回符合要求的服务应用API</li><li>如果是边缘资源与服务网络或外部网络断开，会调用告警模块，通知客户进行处理</li><li>通过可观测模块反馈的网络资源和状况结果对服务进行评估，看是否满足服务使用者需求，若不满足服务使用者需求，则向服务注册中心发起服务替换请求</li><li>服务注册中心对应服务ID检查它所有的副本，结合可观测模块进行评估，选择满足服务使用者需求的最优的副本的API返回给服务使用者。如果服务注册中心没有满足需求的副本，则创建服务新副本，通过</li><li>可观测模块进行新的部署来满足服务使用者的需求</li></ol></li><li><strong>交互逻辑</strong><ol><li>与服务注册中心进行交互，得到服务副本信息</li><li>与可观测模块进行交互，通过可观测模块中观测到的网络状况对服务副本进行评估、选择及替换</li></ol></li><li><strong>系统中的逻辑位置</strong></li></ol></li></ol><h2 id="需求模块涉及到的新增数据结构和对已有数据结构的改动"><a href="#需求模块涉及到的新增数据结构和对已有数据结构的改动" class="headerlink" title="需求模块涉及到的新增数据结构和对已有数据结构的改动 *"></a>需求模块涉及到的新增数据结构和对已有数据结构的改动 *</h2><blockquote></blockquote><h1 id="需求涉及模块的部署形态"><a href="#需求涉及模块的部署形态" class="headerlink" title="需求涉及模块的部署形态*"></a>需求涉及模块的部署形态*</h1><h1 id="需求的UCD设计"><a href="#需求的UCD设计" class="headerlink" title="需求的UCD设计*"></a>需求的UCD设计*</h1><h1 id="需求的参与者与开发进度规划"><a href="#需求的参与者与开发进度规划" class="headerlink" title="需求的参与者与开发进度规划"></a>需求的参与者与开发进度规划</h1><p><strong>参与者：</strong>刘小龙 李逸</p><p><strong>进度规划：</strong></p><p>…</p>]]></content>
    
    
    <categories>
      
      <category>概要设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概要设计</tag>
      
      <tag>云边协同</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>概要设计-可观测</title>
    <link href="/2022/12/05/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8F%AF%E8%A7%82%E6%B5%8B/"/>
    <url>/2022/12/05/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8F%AF%E8%A7%82%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="服务网络可观测特性概要设计文档V2"><a href="#服务网络可观测特性概要设计文档V2" class="headerlink" title="服务网络可观测特性概要设计文档V2"></a>服务网络可观测特性概要设计文档V2</h1><h2 id="1-需求背景"><a href="#1-需求背景" class="headerlink" title="1.  需求背景"></a>1.  需求背景</h2><blockquote><p>讲清楚为什么要做这个需求（不要写因为老师安排你做了这个需求所以你做这个需求，而是结合你的调研情况，讲清楚在什么样的产业需求情况下，引发了老师安排你做或者你主动规划做这个需求）</p></blockquote><h3 id="1-1-面向服务消费者"><a href="#1-1-面向服务消费者" class="headerlink" title="1.1 面向服务消费者"></a>1.1 面向服务消费者</h3><p>目前网络上的服务规模极其庞大，且具有海量交互、泛在分布、动态复杂等特点。服务消费者需要去网络上发现服务、使用服务、观测服务运行状态来完成自己的业务。然而服务与服务之间存在着壁垒，给服务的发现、使用、观测等都带来了困难。服务网络希望让服务消费者使用服务的过程尽可能的简单，能够很容易学习上手甚至开箱即用，而可观测特性在其中扮演了重要作用。</p><p>传统的可观测系统：</p><ul><li>需要在部署服务时就预先准备好用于观测的探针，有的探针实现起来可能较麻烦</li><li>功能相对分散，若要构建一个较全的可观测系统，需要使用多种可观测工具分别负责不同的观测功能</li><li>无法适应越来越复杂的微服务架构和分布式架构</li></ul><p>依托服务网络的可观测系统：</p><ul><li>服务网络要求接入的服务预先设计好对应接口，即服务发布者发布服务时就需要提供可观测性接口，方便服务消费者观测使用的服务</li><li>针对服务网络产生的异构数据，进行动态感知，建立多模态数据监控系统，实现监控指标、日志、调用链等多维异构数据的实时自动获取</li><li>服务网络中服务的关系无时不刻不在变化、演化，可观测系统可以快速识别变化并及时更新服务状态</li></ul><h3 id="1-2-面向服务发布者"><a href="#1-2-面向服务发布者" class="headerlink" title="1.2 面向服务发布者"></a>1.2 面向服务发布者</h3><p>以往服务发布者如企业等角色，需要向公有云去购买服务器实例、集群等资源，亦或自己直接购买服务器，企业的运维人员配置完集群后还要配置网络环境。一切就绪后才能部署应用，带来了极高的门槛。如果服务发布者需要同时使用多个公有云或同时使用公有云和私有服务器，则会更加复杂。</p><p>服务网络类似一个巨大的公有云，在大规模发布、管理服务上具有优势，其中服务网络可观测特性为大规模管理提供了基础。服务网络的管理运维不需要服务发布者参与，服务发布者只需要关注自己的服务。服务网络可观测特性为服务发布者提供：</p><ul><li>实时观测自己提供服务的使用量、网络流量、服务计量、计费信息等</li><li>可观测系统会根据观测到的服务状态信息给出扩缩容建议</li><li>可观测系统可以在服务发生异常时提供日志、调用链等信息辅助服务发布者修复异常</li></ul><p>当然服务发布者也可以不购买使用服务网络提供的云服务器，使用自己的私有服务器或者在其他公有云上部署服务，只要服务符合服务网络定义的规范，就可以接入服务网络，提供给服务消费者。</p><h3 id="1-3-面向平台管理员"><a href="#1-3-面向平台管理员" class="headerlink" title="1.3 面向平台管理员"></a>1.3 面向平台管理员</h3><p>服务网络运行在一个大规模集群的基础上，集群的管理运维由平台管理员完成。大规模集群的运维对服务网络平台的管理员是一件较困难的工作。主要困难体现在：</p><ul><li>大规模集群的控制面apiserver和存储etcd集群无法保证高可用，可能无法及时响应</li><li>大规模集群的调度sheduler调度效率较低</li><li>大规模集群发生异常可能涉及服务众多，牵扯面极大</li></ul><p>所以服务网络可观测特性需要通过采集记录大规模集群运行时的指标和日志，运用数据挖掘和机器学习的方法帮助平台管理员提前预测可能发生的异常，并实现自动告警。当异常已经发生时，服务网络可观测特性是帮助平台管理员进行临时人工调度和找到异常、修复异常的最重要依据。</p><h2 id="2-需求价值"><a href="#2-需求价值" class="headerlink" title="2.需求价值"></a>2.需求价值</h2><blockquote><p>讲清楚这个需求做了之后，前面的需求背景中提到的当前业界面临的哪些痛点问题就可以解决掉了。</p></blockquote><p>相比于传统的服务集成，服务网络呈现跨网跨域场景、服务节点海量多元异构、逻辑结构交互复杂、网络规模尺度各异、主体间可信关系薄弱、网络时变演化等特点，给研究带来极大挑战。服务网络可观测特性来源于云原生可观测性，在云原生现有可观测能力上对服务网络的特性进行适配。可观测性一词来源于控制理论，是指系统可以由其外部输出判断其内部状态的程度。可观测性的基石指标、日志、链路数据能够帮助我们更好的理解运行的系统，为事前预防、事中处理、事后复盘提供了重要决策依据。</p><h3 id="2-1-服务消费者：自动化、可自定义监控"><a href="#2-1-服务消费者：自动化、可自定义监控" class="headerlink" title="2.1 服务消费者：自动化、可自定义监控"></a>2.1 服务消费者：自动化、可自定义监控</h3><p>相比传统的监控系统，使用服务网络，服务消费者不需要再去自己部署探针、学习多种监控工具的使用，只需要学习服务网络对可观测插件规定的接口即可。服务发布者会按照要求提供监控接口，服务消费者调用对应接口即可，服务网络平台为用户提供一些封装好的可以满足对服务基本方面观测的指标。同时大量的原始监控指标也提供给服务消费者，服务消费者可以选择其中一些构成自定义的指标。服务网络可观测特性可以满足服务网络消费者全方位实时监控自己使用的服务的需求，保证可以快速发现服务不可用、服务失败。</p><h3 id="2-2-服务发布者：全方位监控、服务部署监控一体化"><a href="#2-2-服务发布者：全方位监控、服务部署监控一体化" class="headerlink" title="2.2 服务发布者：全方位监控、服务部署监控一体化"></a>2.2 服务发布者：全方位监控、服务部署监控一体化</h3><p>服务网络为服务提供者提供其服务的监控功能，这让服务提供者只需要关注自己服务的业务流程，可观测方面只要按服务网络的接口规范提供接口即可。服务网络负责通过监控接口接管服务的监控，一方面可以让服务提供者监控自己的服务，另一方面可以把网络中的服务监控接口整合让平台管理员了解整个网络上服务的状态。</p><h3 id="2-3-平台管理员：全方位智能化运维"><a href="#2-3-平台管理员：全方位智能化运维" class="headerlink" title="2.3 平台管理员：全方位智能化运维"></a>2.3 平台管理员：全方位智能化运维</h3><p>服务网络可观测特性可以保证服务网络运维人员对整个网络状态的了解，包括服务网络上的各种服务和服务器的状态，对网络上存在的服务故障进行检测，对网络上的异常流量异常调用进行追踪，对存在的安全隐患进行预警。特别是对于大规模跨网跨域场景，网络环境复杂,问题排查难度大，可观测特性可以辅助网络运维人员进行故障排查和决策。</p><h2 id="3-需求功能描述"><a href="#3-需求功能描述" class="headerlink" title="3.需求功能描述"></a>3.需求功能描述</h2><blockquote><p>讲清楚你的这个需求，做完之后，具体实现了那几条功能，注意这个和第二点需求价值的区别，需求价值是讲你通过这个需求实现，解决了哪些痛点问题，而需求功能描述是指具体到软件工程语言的，你所实现的基本功能条目，言简意赅、精准描述。</p></blockquote><p>当前云原生可观测性能力有三大支柱：日志事件（Logging），分布式链路追踪（Tracing）以及指标监控（Metrics）。指标，是一段时间内记录的各个维度的量化信息，用来观察系统的某些状态和趋势；日志，是对程序运行过程中产生的一些离散事件的记录；链路追踪，是对一次请求从接收到处理完毕整个生命周期内的调用链路的记录。服务网络可观测特性主要实现的功能包括服务数据采集与可视化功能、预警提醒功能、故障检测与分析功能。</p><h3 id="3-1-数据采集功能"><a href="#3-1-数据采集功能" class="headerlink" title="3.1 数据采集功能"></a>3.1 数据采集功能</h3><p>数据采集包括服务数据采集和集群数据采集：</p><p>服务数据采集主要包括对服务运行过程产生的日志、指标和链路信息的数据采集，采集后根据设置的规则存储一段时间供用户查询和数据挖掘。通过对目前主流的可观测工具Prometheus、Elasticsearch和Skywalking进行封装整合，兼容OpenTelementry规范，提供接口规范给服务提供者，提供接口给服务使用者和平台管理员；集群数据采集主要包括对服务网络依托的服务器或集群的运行数据进行采集和存储。</p><h3 id="3-2-可视化功能"><a href="#3-2-可视化功能" class="headerlink" title="3.2 可视化功能"></a>3.2 可视化功能</h3><p>可视化能力是面向所有服务网络参与者的，是对采集到的数据可视化呈现给参与者的能力。服务消费者选择要使用的服务，然后可以使用服务网络提供的封装指标或使用原生指标自己封装指标，再通过可视化图表显示出来，方便监控自己使用的服务状态；服务提供者则可以实时监视自己的服务使用量以及部署服务的服务器或集群的状态；平台管理员可以看到整个网络的服务状态，以及承载网络的集群的存储、CPU、内存、网络流量等负载指标的可视化图表。</p><h3 id="3-3-告警提醒功能"><a href="#3-3-告警提醒功能" class="headerlink" title="3.3 告警提醒功能"></a>3.3 告警提醒功能</h3><p>分为对服务的告警和对集群的告警。服务数据采集可以采集到服务的各项数据，通过设置告警规则，可以在触发规则时提醒对应服务网络参与者。对集群设置告警也同理。</p><h3 id="3-4-故障检测与分析功能"><a href="#3-4-故障检测与分析功能" class="headerlink" title="3.4 故障检测与分析功能"></a>3.4 故障检测与分析功能</h3><p>基于统计模型和机器学习的方法，检测服务和集群的各指标是否存在异常，如果存在可以通过链路追踪能力辅助分析故障的原因。</p><h2 id="4-需求在整体系统功能图中所处的位置"><a href="#4-需求在整体系统功能图中所处的位置" class="headerlink" title="4.需求在整体系统功能图中所处的位置"></a>4.需求在整体系统功能图中所处的位置</h2><blockquote><p>基于功能图的示意图，细化到模块粒度</p></blockquote><img src="/images/snos-observability/image-20221113161743727.png" alt="image-20221113161743727" style="zoom:67%;" /><h2 id="5-需求在整体系统架构图中所处的位置"><a href="#5-需求在整体系统架构图中所处的位置" class="headerlink" title="5.需求在整体系统架构图中所处的位置"></a>5.需求在整体系统架构图中所处的位置</h2><blockquote><p>基于架构图的示意图，细化到模块粒度</p></blockquote><img src="/images/snos-observability/架构图.png" alt="架构图" style="zoom: 67%;" /><h2 id="6-需求在整体业务流程中所承载的流程"><a href="#6-需求在整体业务流程中所承载的流程" class="headerlink" title="6.需求在整体业务流程中所承载的流程"></a>6.需求在整体业务流程中所承载的流程</h2><blockquote><p>基于流程图的示意图，细化到模块粒度</p></blockquote><p><img src="/images/snos-observability/image-20221118221147874.png" alt="image-20221118221147874"></p><h2 id="7-需求对外暴露的接口能力描述"><a href="#7-需求对外暴露的接口能力描述" class="headerlink" title="7.需求对外暴露的接口能力描述"></a>7.需求对外暴露的接口能力描述</h2><blockquote><p>不是直接把API写出来，而是写你这个API要实现的功能是哪些，言简意赅</p></blockquote><h3 id="7-1-原始数据查询接口"><a href="#7-1-原始数据查询接口" class="headerlink" title="7.1 原始数据查询接口"></a>7.1 原始数据查询接口</h3><p>面向所有服务网络参与者，查询可以根据标签进行筛选。原始数据指服务网络监控系统原生支持的指标数据，包括服务的原始数据和集群的原始数据。服务消费者可以查询自己正在使用的服务的部分原始数据信息。服务发布者可以查询自己正在提供的服务的所有原始数据信息，平台管理员可以查看服务网络上所有的服务的部分原始数据和网络集群的所有原始数据信息。</p><h3 id="7-2-统计数据查询接口"><a href="#7-2-统计数据查询接口" class="headerlink" title="7.2 统计数据查询接口"></a>7.2 统计数据查询接口</h3><p>面向服务发布者和服务消费者。服务发布者可以自定义一些服务指标，然后通过此接口查询，并且可以通过此接口向服务消费者暴露一些自定义的服务指标。</p><h3 id="7-3-服务日志查询接口"><a href="#7-3-服务日志查询接口" class="headerlink" title="7.3 服务日志查询接口"></a>7.3 服务日志查询接口</h3><p>面向服务提供者、服务消费者。服务提供者、服务消费者可以查询服务运行期间产生的日志。</p><h3 id="7-4-告警接口"><a href="#7-4-告警接口" class="headerlink" title="7.4 告警接口"></a>7.4 告警接口</h3><p>面向所有服务网络参与者。可以对于服务或集群的告警规进行增删改查，触发规则时会告警通知相应参与者。可以查看已经触发的告警。</p><h3 id="7-5-异常预测结果查询接口"><a href="#7-5-异常预测结果查询接口" class="headerlink" title="7.5 异常预测结果查询接口"></a>7.5 异常预测结果查询接口</h3><p>面向服务提供者、服务消费者。系统会记录服务一段时间的运行数据，进行数据挖掘、模式识别，当检测到与规律不符的运行状态信息时会预测出现了异常。</p><h2 id="8-需求的模块组成及介绍"><a href="#8-需求的模块组成及介绍" class="headerlink" title="8.需求的模块组成及介绍"></a>8.需求的模块组成及介绍</h2><blockquote><p>模块1的功能描述，输⼊、输出、处理逻辑、与其他模块的交互逻辑、处于系统中的逻辑位置、处于部署系统中的物理位置</p></blockquote><h3 id="8-1-数据采集模块"><a href="#8-1-数据采集模块" class="headerlink" title="8.1 数据采集模块"></a>8.1 数据采集模块</h3><p><strong>功能描述</strong></p><ul><li>对服务数据进行采集存储</li><li>对集群信息进行采集存储</li><li>将采集到的数据可视化，方便实时监控</li></ul><p><strong>输入</strong></p><p><strong>输出</strong></p><p><strong>处理逻辑</strong></p><p><strong>交互逻辑</strong></p><p><strong>处于系统中的逻辑位置</strong></p><p><strong>处于部署系统中的物理位置</strong></p><h3 id="8-2-可视化模块"><a href="#8-2-可视化模块" class="headerlink" title="8.2 可视化模块"></a>8.2 可视化模块</h3><p><strong>功能描述</strong></p><ul><li>对服务数据进行采集存储</li><li>对集群信息进行采集存储</li><li>将采集到的数据可视化，方便实时监控</li></ul><p><strong>输入</strong></p><p><strong>输出</strong></p><p><strong>处理逻辑</strong></p><p><strong>交互逻辑</strong></p><p><strong>处于系统中的逻辑位置</strong></p><p><strong>处于部署系统中的物理位置</strong></p><h3 id="8-3-告警提醒模块"><a href="#8-3-告警提醒模块" class="headerlink" title="8.3 告警提醒模块"></a>8.3 告警提醒模块</h3><p><strong>功能描述</strong></p><p>触发规则时提醒对应服务网络参与者</p><p><strong>输入</strong></p><p><strong>输出</strong></p><p><strong>处理逻辑</strong></p><p><strong>交互逻辑</strong></p><p><strong>处于系统中的逻辑位置</strong></p><p><strong>处于部署系统中的物理位置</strong></p><h3 id="8-4-故障检测与分析模块"><a href="#8-4-故障检测与分析模块" class="headerlink" title="8.4 故障检测与分析模块"></a>8.4 故障检测与分析模块</h3><p><strong>功能描述</strong></p><p>检测服务和集群的各指标是否存在异常</p><p><strong>输入</strong></p><p><strong>输出</strong></p><p><strong>处理逻辑</strong></p><p><strong>交互逻辑</strong></p><p><strong>处于系统中的逻辑位置</strong></p><p><strong>处于部署系统中的物理位置</strong></p><h2 id="9-需求模块涉及到的新增数据结构和对已有数据结构的改动"><a href="#9-需求模块涉及到的新增数据结构和对已有数据结构的改动" class="headerlink" title="9.需求模块涉及到的新增数据结构和对已有数据结构的改动"></a>9.需求模块涉及到的新增数据结构和对已有数据结构的改动</h2><h2 id="10-需求模块涉及到的新增数据结构和对已有数据结构的改动"><a href="#10-需求模块涉及到的新增数据结构和对已有数据结构的改动" class="headerlink" title="10.需求模块涉及到的新增数据结构和对已有数据结构的改动"></a>10.需求模块涉及到的新增数据结构和对已有数据结构的改动</h2><h2 id="11-需求的UCD设计"><a href="#11-需求的UCD设计" class="headerlink" title="11.需求的UCD设计"></a>11.需求的UCD设计</h2><h2 id="12-需求的参与者与开发进度规划"><a href="#12-需求的参与者与开发进度规划" class="headerlink" title="12.需求的参与者与开发进度规划"></a>12.需求的参与者与开发进度规划</h2><p>参与者：陈宸，程立业</p>]]></content>
    
    
    <categories>
      
      <category>概要设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概要设计</tag>
      
      <tag>可观测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>概要设计-区块链</title>
    <link href="/2022/12/05/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <url>/2022/12/05/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="概要设计-区块链"><a href="#概要设计-区块链" class="headerlink" title="概要设计 - 区块链"></a>概要设计 - 区块链</h1><h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><blockquote><p>讲清楚为什么要做这个需求（不要写因为老师安排你做了这个需求所以你做这个需求，而是结合你的调研情况，讲清楚在什么样的产业需求情况，引发了老师安排你做或者你主动规划做这个需求）</p></blockquote><ol><li><p><strong>传统服务交互问题</strong></p><ol><li><p>服务实体可信度保障机制不完善</p><p>服务交互中涉及的主要实体有服务、服务提供者和服务使用者。</p><p>服务本身的QoS和输出结果无法保证可信：一方面服务无法保证在延迟、响应成功率等QoS指标满足声称的SLA；另一方面服务执行过程对用户而言是一个黑箱，无法保证输出结果完全正确，符合服务使用者需求。</p><p>服务提供者的可信主要体现在其提供的服务是否可信。首先服务本身可信缺失，其次同一服务提供者的多个服务之间以及不同服务提供者之间相对独立，服务使用者无法对其进行较为全面地信任分析与决策。</p><p>服务使用者的可信主要体现在其在使用服务时不存在恶意行为，例如欠费和DDoS攻击等。目前各平台间并没有统一的判定标准，且由于平台间相互独立，某恶意用户在被A平台判定为恶意后其他平台无法感知。</p></li><li><p>服务实体间数据交互可信保障机制不完善</p><p>数据可能丢失：传统的数据存储和安全系统高度集中，这意味着存在单点故障。也就是对中央服务器的任何外部攻击，如恶意软件或暴力破解尝试，都可能导致存储数据的部分或全部丢失。根据存储在系统中的数据类型，数据丢失的后果可能对企业甚至经济造成毁灭性的影响。现有的服务网络仍然依托于现有的传统数据库，没有对服务共享，服务数据调用过程中的数据加以保护，不满足用户对于信息完整性的需求；因此需要新的架构来实现对信息完整性的保护。</p><p>数据可能被篡改：服务的种类多种多样，在金融领域，数字版权领域，公益领域等，诸如此类需要多方参与，多方认证的数据，由于经过的机构复杂，认证过程复杂，并且一些核心的数据需要保证数据不可更改。在服务共享领域，服务提供方有权要求在共享的服务数据使用过程中不被篡改，对于防篡改的特性，现有的传输方式，只能通过严格的认证方式感知数据是否被篡改，而不能保证不出现篡改的结果。</p></li><li><p>现有BaaS和服务网络结合存在鸿沟，使用成本较高</p><p>由于区块链和智能合约需要用户自定义，自定义区块链和智能合约所以需要的成本比较高，实现服务数据之间的可信交互成本提高，目前没有一个针对服务交互场景下适用的智能合约，是可信交互难以广泛推广的瓶颈之处。</p></li></ol></li><li><p><strong>传统服务交易问题</strong></p><ol><li><p>结算模式无法保障服务使用者权益</p><p>传统服务交易结算对服务实际运行质量缺乏全面考量，也缺乏灵活性，无法满足使用者个性化的QoS需求和跨供应商的服务自主选择权。以<a href="https://help.aliyun.com/document_detail/56773.html">阿里云</a>、<a href="https://www.huaweicloud.com/declaration/sla.html">华为云</a>和<a href="https://www.amazonaws.cn/legal/sla/">AWS</a>为例，其SLA只对服务可用性做了一定保证，而没有考虑延迟、吞吐量等指标；如果未满足SLA，它们采取事后补偿的方式返还服务使用者一定比例的金额，补偿依据的只是服务提供者单方面的监控指标，且这些金额是供应商绑定的（即退款只能用于使用同一服务提供者的服务）。</p></li><li><p>简化交易流程</p><p>对于服务请求方来说，服务请求方希望与服务提供方以一种简单便捷的方式来实现服务请求与调用的双方认证与消费，传统的服务交易的安全性取决于第三方的支付平台，依赖性强。如果可以省略第三方，会极大简化交易流程，给交易双方带来便捷。</p></li><li><p>减小交易风险</p><p>第三方支付企业在数据安全方面，一向采用的是数据中心的支付方式，所有信息被统一存在中心数据库，可能存在黑客或者其他人员篡改数据库的情况，因为大型数据中心所存留的数据量很庞大，一旦被篡改，所造成的后果不可估量。</p></li></ol></li><li><p><strong>区块链性能问题</strong></p><p>服务网络场景下存在海量异构服务和众多服务提供者以及使用者，使用区块链存储关键数据实现服务可信交互与交易固然能够保障数据安全性，提升交易交互流程便捷性；但该场景下节点数量规模大会产生频繁的区块链交易请求以及大量需要写入区块链的数据，这对区块链本身的TPS和可扩展性提出了很高的要求，现有的区块链应用并不能很好地解决上述性能问题。</p></li></ol><h2 id="需求价值"><a href="#需求价值" class="headerlink" title="需求价值"></a>需求价值</h2><blockquote><p>讲清楚这个需求做了之后，前面的需求背景中提到的当前业界面临的哪些痛点问题就可以解决掉了。</p></blockquote><ol><li><p><strong>服务交互数据安全、实体可信、使用便捷</strong></p><p>区块链的去中心化结构能够保证区块链上的所有节点维护相同的数据，意味着，只要区块链上有一个节点是稳定运行的，区块链上的数据就不会丢失，能够完整保存，保证了区块链上的数据是相对安全的。如果要修改区块链中的信息，必须征得半数以上节点的同意并修改所有节点中的信息，而这些节点通常掌握在不同的主体手中，因此篡改区块链中的信息是一件极其困难的事。通过使用区块链作为传输的中间节点，使得数据交互双方能够通过区块链中的节点来验证传输前后的数据是否被更改，严格保证交互数据的安全性和防篡改。</p><p>通过服务QoS以及用户评价上链，在此基础上对服务和用户进行信任建模，可以一定程度上保证服务交互过程中多方实体的可信。</p><p>通过将服务交互流程以智能合约的形式上链，提供给用户serverless式的无感区块链服务，可以最大限度降低用户使用区块链的成本。</p></li><li><p><strong>服务交易安全可靠、流程简化</strong></p><p>有关服务交易的相关信息是比较重要的信息，所以服务交易相关的信息会存储到区块链中，通过服务交易信息上链的方式，可以实现交易记录安全存储，不可篡改且可以溯源；通过将服务交易流程写入智能合约，可以实现服务QoS智能感知的服务自动交易，极大简化了交易流程；通过将服务可信交互过程以智能合约实现以及将用户调用的服务自组织为区块链，可以实现自动化的区块链部署和服务间传输数据上链，免去了用户运维区块链和开发智能合约的负担，使得开发和部署变得简单易用。</p></li><li><p><strong>服务区块链TPS高、可扩展性好</strong></p><p>向区块链中写入数据代价高，耗时长；大规模可信服务网络平台通过建立父链-子链的双层区块链架构，将元数据写入子链，将整合后的元数据打包写入父链，使得写入的过程更加高效；当服务数量增多，服务数据需要高频、大量写入的时候，可以突破大规模场景下区块链的效率瓶颈。</p></li></ol><h2 id="需求功能描述"><a href="#需求功能描述" class="headerlink" title="需求功能描述"></a>需求功能描述</h2><blockquote><p>讲清楚你的这个需求，做完之后，具体实现了那几条功能，注意这个和第二点需求价值的区别，需求价值是讲你通过这个需求实现，解决了哪些痛点问题，而需求功能描述是指具体到软件工程语言的，你所实现的基本功能条目，言简意赅、精准描述。</p></blockquote><ol><li><p><strong>节点管理功能</strong></p><p>子链：区块链节点为服务消费者调用的服务，多个服务以应用为粒度组成一条子链（若应用调用服务数量太少则按照子链节点自组织规则合并加入已有子链），存储服务间传输数据（实现服务间可信交互）以及服务QoS（实现服务消费者与服务间可信交互）和每次调用产生的费用（为父链实现服务交易做准备）。应用交互网络</p><p>父链：区块链节点为服务消费者和服务发布者，存储服务QoS、服务评价（摘要）（实现服务消费者与服务间可信交互）和实际转账记录（实现服务交易）。服务网络交易网络</p><ol><li><p>支持节点的加入与退出</p><p>新用户注册：父链节点加入</p><p>用户注销：父链节点退出</p><p>发布应用：使用的服务按照子链节点自组织规则创建新子链或加入已有子链</p><p>应用更新（涉及调用服务变更）：不再使用的服务退出子链，新使用的服务加入应用所在子链</p><p>应用下线：如果应用所在子链只包含自身，则销毁子链，否则子链中该应用使用的服务退出子链</p></li><li><p>子链节点自组织</p><p>设定子链节点数下限$N$（保证安全性）。</p><p>新应用发布时如果该应用使用服务数量$\ge N$则创建为新子链，否则从当前系统中所有子链中吞吐量较低和节点数较少的当中选择一个加入。</p><p>应用更新时如果当前子链节点数$&lt;N$则整条子链销毁，在保留必要原有数据的情况下从当前系统中所有子链中吞吐量较低和节点数较少的当中选择一个加入。</p><p>应用下线时如果当前子链节点数$&lt;N$则当前子链销毁，在保留必要原有数据的情况下从当前系统中所有子链中吞吐量较低和节点数较少的当中选择一个加入。</p></li></ol></li><li><p><strong>持久存储功能</strong></p><ol><li>单条交易记录存储</li><li>时间段内交易记录存储</li><li>用户余额存储</li><li>用户评价存储</li><li>QoS存储</li></ol></li><li><p><strong>非持久存储功能</strong></p><ol><li>交互数据（摘要）快速存储</li><li>网络数据与区块链数据快速比对</li><li>无用数据标记及删除</li></ol></li><li><p><strong>交易机制设计功能</strong></p><ol><li>QoS获取</li><li>交易规则设计</li><li>服务实际价格计算</li></ol></li><li><p><strong>可信评估功能</strong></p><ol><li>用户和服务的信任模型构建</li><li>信任模型更新</li></ol></li></ol><h2 id="需求在整体系统功能图中所处的位置"><a href="#需求在整体系统功能图中所处的位置" class="headerlink" title="需求在整体系统功能图中所处的位置"></a>需求在整体系统功能图中所处的位置</h2><blockquote><p>基于功能图的示意图，细化到模块粒度</p></blockquote><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/functions.png" alt="功能图"></p><h2 id="需求在整体系统架构图中所处的位置"><a href="#需求在整体系统架构图中所处的位置" class="headerlink" title="需求在整体系统架构图中所处的位置"></a>需求在整体系统架构图中所处的位置</h2><blockquote><p>基于架构图的示意图，细化到模块粒度</p></blockquote><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/architecture.png" alt="架构图"></p><h2 id="需求在整体业务流程中所承载的流程"><a href="#需求在整体业务流程中所承载的流程" class="headerlink" title="需求在整体业务流程中所承载的流程"></a><strong>需求在整体业务流程中所承载的流程</strong></h2><blockquote><p>基于流程图的示意图，细化到模块粒度</p></blockquote><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/process-legend.png" alt="流程图图例"></p><ol><li><p>服务可信交互与交易流程</p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/process-interaction-transaction.png" alt="可信交互与交易流程"></p><p>服务调用完成后：</p><ol><li>服务观测模块调用服务所在节点子链的智能合约t1，输入参数为（时间，服务ID，服务提供者ID，服务调用者ID，SLA，QoS，预计费用）</li><li>智能合约t1计算出实际费用，将本次交易记录（时间，服务ID，服务提供者ID，服务调用者ID，SLA，QoS，预计费用，实际费用）写入子链</li><li>子链的智能合约t2定期将这段时间内的服务交易记录压缩（相同服务ID，服务提供者ID，服务调用者ID的交易记录压缩为一条），调用父链的智能合约T，输入参数为压缩后的交易记录      </li><li>父链智能合约T将每条压缩后的交易记录写入父链（时间，服务ID，服务提供者ID，服务调用者ID，调用时间段，SLA，平均QoS，预计费用，实际费用），并由服务调用者向服务提供者发起转账</li></ol></li><li><p>节点管理流程</p><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/process-node-management.png" alt="节点管理流程"></p><ul><li><p>子链重组</p><p>服务下线/应用变更调用服务/应用下线/用户注销时，若对应节点退出子链后子链剩余节点数$&lt;N$，则子链首先将链上必要数据保存，然后销毁子链，从服务网络其他子链中选择吞吐量较低且节点数较少的一条（最优子链）加入。</p></li><li><p>交易结算</p><p>即服务交易流程中到达汇总时间后的三个步骤：压缩子链交易记录（对用户结算，压缩该用户ID的所有交易；对服务结算，压缩该服务ID的所有交易），父链写入压缩记录，发起转账。需要注意的是，如果此时还有与用户或服务相关的SCD和SRD未确认，需要等到确认后才能开始结算。</p></li></ul></li></ol><h2 id="需求对外部暴露的接口能力描述"><a href="#需求对外部暴露的接口能力描述" class="headerlink" title="需求对外部暴露的接口能力描述"></a><strong>需求对外部暴露的接口能力描述</strong></h2><blockquote><p>不是直接把API写出来，而是写你这个API要实现的功能是哪些，言简意赅</p></blockquote><p>服务提供方，服务使用方，管理员</p><h3 id="服务提供方身份"><a href="#服务提供方身份" class="headerlink" title="服务提供方身份"></a>服务提供方身份</h3><ol><li>父链节点加入：用户注册时调用，新用户作为新的父链节点加入交易网络</li><li>父链节点退出：用户注销时调用，注销用户的父链节点退出交易网络</li><li>发布应用：指定应用调用的服务，按照子链自组织规则创建子链或加入已有子链</li><li>更新应用：指定应用更新后不再使用的服务和新使用的服务，按照子链自组织规则重新组织子链</li><li>下线应用：销毁子链，按照子链自组织规则重新组织子链</li></ol><h3 id="服务使用方身份"><a href="#服务使用方身份" class="headerlink" title="服务使用方身份"></a>服务使用方身份</h3><ol><li>父链节点加入：用户注册时调用，新用户作为新的父链节点加入交易网络</li><li>父链节点退出：用户注销时调用，注销用户的父链节点退出交易网络</li><li>发表评价：发表对用户或服务的评价</li><li>查询评价：查询用户或服务的评价</li></ol><h3 id="管理员身份"><a href="#管理员身份" class="headerlink" title="管理员身份"></a>管理员身份</h3><ol><li>交易记录获取：查询用户交易记录及其收费依据（QoS）</li><li>恶意评价警告：系统检测到用户存在恶意评价时会警告用户</li><li>不可信交互警告：子链检测到服务传输数据不一致时会警告用户</li><li>余额不足警告：服务收到用户调用请求时如果用户余额不足会警告用户</li><li>非持久存储删除规则自定义：用户指定非持久存储中哪些数据被标记为无用以及间隔多久会被永久删除</li></ol><h2 id="需求的模块组成及介绍"><a href="#需求的模块组成及介绍" class="headerlink" title="需求的模块组成及介绍*"></a><strong>需求的模块组成及介绍</strong>*</h2><blockquote><p>模块x的功能描述，输入、输出、处理逻辑、与其他模块的交互逻辑、处于系统中的逻辑位置、处于部署系统中的物理位置</p></blockquote><p><img src="/images/%E6%A6%82%E8%A6%81%E8%AE%BE%E8%AE%A1-%E5%8C%BA%E5%9D%97%E9%93%BE/module.png" alt="模块示意"></p><h2 id="需求模块涉及到的新增数据结构和对已有数据结构的改动"><a href="#需求模块涉及到的新增数据结构和对已有数据结构的改动" class="headerlink" title="需求模块涉及到的新增数据结构和对已有数据结构的改动*"></a><strong>需求模块涉及到的新增数据结构和对已有数据结构的改动</strong>*</h2><blockquote><p>列出核心的数据结构，包括表结构的设计，在缓存中的存储格式等</p></blockquote><h2 id="需求涉及模块的部署形态"><a href="#需求涉及模块的部署形态" class="headerlink" title="需求涉及模块的部署形态*"></a><strong>需求涉及模块的部署形态</strong>*</h2><blockquote><p>如果涉及到独立部署的，增加这块的解释，如果不涉及到独立部署，描述清楚和哪个部署单元一起部署即可</p></blockquote><h2 id="需求的UCD设计"><a href="#需求的UCD设计" class="headerlink" title="需求的UCD设计"></a><strong>需求的UCD设计</strong></h2><blockquote><p>列出来相关模块的前端界面呈现模式，统一基于sketch框架来画</p></blockquote><h2 id="需求的参与者与开发进度规划"><a href="#需求的参与者与开发进度规划" class="headerlink" title="需求的参与者与开发进度规划"></a><strong>需求的参与者与开发进度规划</strong></h2><p>参与者：罗嘉胤 庞盛业 于书懿</p>]]></content>
    
    
    <categories>
      
      <category>概要设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概要设计</tag>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
